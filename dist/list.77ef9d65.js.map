{"version":3,"sources":["list.js"],"names":["createList","value","createNode","appendList","list","node","x","next","removeFromList","p","data","travelList","fn","node2","node3","node4","console","log"],"mappings":"AAAA,IAAIA,UAAU,GAAG,SAAbA,UAAa,CAAAC,KAAK,EAAG;AACrB,SAAOC,UAAU,CAACD,KAAD,CAAjB;AACH,CAFD;;AAIA,IAAME,UAAU,GAAG,SAAbA,UAAa,CAACC,IAAD,EAAMH,KAAN,EAAe;AAC9B,MAAMI,IAAI,GAAKH,UAAU,CAACD,KAAD,CAAzB;AACA,MAAKK,CAAC,GAAGF,IAAT;;AACA,SAAME,CAAC,CAACC,IAAR,EAAa;AACTD,IAAAA,CAAC,GAAGA,CAAC,CAACC,IAAN;AACH,GAL6B,CAK7B;;;AACDD,EAAAA,CAAC,CAACC,IAAF,GAASF,IAAT;AACA,SAAOA,IAAP;AACH,CARD,EASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAMG,cAAc,GAAG,SAAjBA,cAAiB,CAACJ,IAAD,EAAOC,IAAP,EAAgB;AACnC,MAAIC,CAAC,GAAGF,IAAR;AACA,MAAIK,CAAC,GAAGJ,IAAR,CAFmC,CAErB;;AACd,SAAOC,CAAC,KAAKD,IAAN,IAAcC,CAAC,KAAK,IAA3B,EAAiC;AAAE;AACjCG,IAAAA,CAAC,GAAGH,CAAJ;AACAA,IAAAA,CAAC,GAAGA,CAAC,CAACC,IAAN;AACD;;AACD,MAAGD,CAAC,KAAK,IAAT,EAAc;AAAE;AACd,WAAO,KAAP;AACD,GAFD,MAEM,IAAGA,CAAC,KAAKG,CAAT,EAAW;AAAE;AACjBA,IAAAA,CAAC,GAAGH,CAAC,CAACC,IAAN;AACA,WAAOE,CAAP,CAFe,CAEN;AACV,GAHK,MAGD;AACHA,IAAAA,CAAC,CAACF,IAAF,GAASD,CAAC,CAACC,IAAX;AACA,WAAOH,IAAP,CAFG,CAES;AACb;AACF,CAhBH;;AAiBA,IAAMF,UAAU,GAAG,SAAbA,UAAa,CAAAD,KAAK,EAAG;AACvB,SAAM;AACFS,IAAAA,IAAI,EAACT,KADH;AAEFM,IAAAA,IAAI,EAAC;AAFH,GAAN;AAIH,CALD;;AAMA,IAAMI,UAAU,GAAG,SAAbA,UAAa,CAACP,IAAD,EAAMQ,EAAN,EAAW;AAC1B,MAAIN,CAAC,GAAGF,IAAR;;AACA,SAAME,CAAC,KAAK,IAAZ,EAAiB;AACbM,IAAAA,EAAE,CAACN,CAAD,CAAF;AACAA,IAAAA,CAAC,GAAGA,CAAC,CAACC,IAAN;AACH;AACJ,CAND;;AAOA,IAAMH,IAAI,GAAGJ,UAAU,CAAC,EAAD,CAAvB;AACA,IAAMa,KAAK,GAAGV,UAAU,CAACC,IAAD,EAAM,EAAN,CAAxB;AACA,IAAMU,KAAK,GAAGX,UAAU,CAACC,IAAD,EAAM,EAAN,CAAxB;AACA,IAAMW,KAAK,GAAGZ,UAAU,CAACC,IAAD,EAAM,EAAN,CAAxB;AACAI,cAAc,CAACJ,IAAD,EAAMU,KAAN,CAAd;AACAE,OAAO,CAACC,GAAR,CAAY,MAAZ;AACAD,OAAO,CAACC,GAAR,CAAYb,IAAZ;AACAO,UAAU,CAACP,IAAD,EAAM,UAAAC,IAAI,EAAE;AAClBW,EAAAA,OAAO,CAACC,GAAR,CAAYZ,IAAI,CAACK,IAAjB;AACH,CAFS,CAAV","file":"list.77ef9d65.js","sourceRoot":"..\\src","sourcesContent":["let createList = value =>{\r\n    return createNode(value);\r\n};\r\n\r\nconst appendList = (list,value) =>{\r\n    const node   = createNode(value);\r\n    let  x = list\r\n    while(x.next){\r\n        x = x.next\r\n    }//x.next===null//x为最后一个节点\r\n    x.next = node;\r\n    return node;\r\n}\r\n// const removeFromList = (list,node)=>{\r\n//     debugger;\r\n//     let x = list\r\n//     let p = null\r\n//     while(x  !== node){\r\n//         p = x\r\n//         x=x.next\r\n//     }\r\n//     // console.log(p===null || x的上一个节点)\r\n//     // console.log(x===node || x===null)\r\n//     p.next = x.next\r\n//     if(list === node){\r\n//         //如果删除的是第一个节点\r\n//         //第一个节点.next = 第2个节点.next\r\n//         list = node.next;\r\n//     }else{\r\n//         //如果删除的是第二个节点\r\n//         //第1个节点.next = 第2个节点.next \r\n//         if(list.next === node){\r\n//             list.next = node.next\r\n//         }else{\r\n//             //如果删除的是第三个节点\r\n//             //第2个节点.next = 第3个节点.next\r\n//             if(list.next.next ===  node){\r\n//                 list.next.next = node.next;\r\n//             }else{\r\n//                 //如果删除的是第四个节点\r\n//                 //第3个节点.next = node.next\r\n//                 if( list.next.next.next === node){\r\n//                     list.next.next.next = node.next;\r\n//                 }\r\n//             }\r\n//         }\r\n//     }\r\nconst removeFromList = (list, node) => {\r\n    let x = list;\r\n    let p = node; // 课堂里将 p 初始化为 null，这里改为 node\r\n    while (x !== node && x !== null) { // 课堂里忘了对 null 进行处理，如果 node 不在 list 中，x 就可能为 null\r\n      p = x;\r\n      x = x.next;\r\n    }\r\n    if(x === null){ // 若 x 为 null，则不需要删除，直接 return， false 表示无法删除不在list里的节点\r\n      return false\r\n    }else if(x === p){ // 这说明要删除的节点是第一个节点\r\n      p = x.next\r\n      return p // 如果删除的是第一个节点，那么就要把新 list 的头节点 p 返回给外面，即 newList = removeFromList(list, list)\r\n    }else{\r\n      p.next = x.next;\r\n      return list // 如果删除的不是第一个节点，返回原来的 list 即可\r\n    }\r\n  };\r\nconst createNode = value =>{\r\n    return{\r\n        data:value,\r\n        next:null\r\n    };\r\n};\r\nconst travelList = (list,fn)=>{\r\n    let x = list;\r\n    while(x !== null){\r\n        fn(x)\r\n        x = x.next\r\n    }\r\n}\r\nconst list = createList(10);\r\nconst node2 = appendList(list,20);\r\nconst node3 = appendList(list,30);\r\nconst node4 = appendList(list,40);\r\nremoveFromList(list,node3)\r\nconsole.log(\"list\");\r\nconsole.log(list);\r\ntravelList(list,node=>{\r\n    console.log(node.data)\r\n})\r\n"]}